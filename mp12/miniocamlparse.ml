type token =
  | INTEGER_LITERAL of (int)
  | FLOAT_LITERAL of (float)
  | STRING_LITERAL of (string)
  | IDENT of (string)
  | EOF
  | LET
  | IN
  | REC
  | FUN
  | TRUE
  | FALSE
  | REF
  | IF
  | THEN
  | ELSE
  | HD
  | TL
  | FST
  | SND
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | SEMICOLON
  | COMMA
  | RIGHTARROW
  | EQ
  | LT
  | GT
  | NEQ
  | DEREF
  | ASSIGN
  | CONS
  | ANDAND
  | OROR
  | PLUS
  | MINUS
  | MULT
  | DIV
  | CARET
  | AT
  | NOT
  | APP
  | COLON

open Parsing;;
let _ = parse_error;;
# 1 "miniocamlparse.mly"

  open Miniocamlast
# 53 "miniocamlparse.ml"
let yytransl_const = [|
    0 (* EOF *);
  261 (* LET *);
  262 (* IN *);
  263 (* REC *);
  264 (* FUN *);
  265 (* TRUE *);
  266 (* FALSE *);
  267 (* REF *);
  268 (* IF *);
  269 (* THEN *);
  270 (* ELSE *);
  271 (* HD *);
  272 (* TL *);
  273 (* FST *);
  274 (* SND *);
  275 (* LPAREN *);
  276 (* RPAREN *);
  277 (* LBRACK *);
  278 (* RBRACK *);
  279 (* SEMICOLON *);
  280 (* COMMA *);
  281 (* RIGHTARROW *);
  282 (* EQ *);
  283 (* LT *);
  284 (* GT *);
  285 (* NEQ *);
  286 (* DEREF *);
  287 (* ASSIGN *);
  288 (* CONS *);
  289 (* ANDAND *);
  290 (* OROR *);
  291 (* PLUS *);
  292 (* MINUS *);
  293 (* MULT *);
  294 (* DIV *);
  295 (* CARET *);
  296 (* AT *);
  297 (* NOT *);
  298 (* APP *);
  299 (* COLON *);
    0|]

let yytransl_block = [|
  257 (* INTEGER_LITERAL *);
  258 (* FLOAT_LITERAL *);
  259 (* STRING_LITERAL *);
  260 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\003\000\003\000\000\000"

let yylen = "\002\000\
\002\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\001\000\004\000\006\000\001\000\001\000\001\000\008\000\
\006\000\002\000\003\000\001\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\013\000\000\000\000\000\000\000\014\000\015\000\
\000\000\022\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\009\000\000\000\
\011\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\012\000\000\000\000\000\021\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\025\000\028\000"

let yysindex = "\012\000\
\112\255\000\000\000\000\250\254\021\255\030\255\000\000\000\000\
\112\255\000\000\014\000\007\255\249\254\254\254\023\255\000\000\
\112\255\112\255\112\255\112\255\112\255\112\255\112\255\112\255\
\074\255\000\000\007\255\243\254\007\255\007\255\000\000\223\254\
\223\254\091\255\002\255\011\255\011\255\000\000\000\000\019\255\
\000\000\007\255\028\255\020\255\007\255\033\255\112\255\112\255\
\049\255\000\000\062\255\074\255\000\000\112\255\074\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\006\000\000\000\000\000\000\000\000\000\000\000\000\000\124\000\
\141\000\158\000\175\000\052\000\088\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\010\000"

let yygindex = "\000\000\
\000\000\255\255\035\000"

let yytablesize = 465
let yytable = "\011\000\
\010\000\021\000\022\000\023\000\024\000\018\000\017\000\015\000\
\041\000\016\000\026\000\042\000\001\000\016\000\012\000\032\000\
\033\000\034\000\035\000\036\000\037\000\038\000\039\000\003\000\
\013\000\027\000\004\000\005\000\017\000\018\000\006\000\007\000\
\008\000\014\000\019\000\029\000\021\000\022\000\023\000\024\000\
\030\000\009\000\031\000\045\000\048\000\051\000\052\000\023\000\
\024\000\017\000\018\000\006\000\055\000\047\000\050\000\019\000\
\020\000\021\000\022\000\023\000\024\000\040\000\003\000\043\000\
\044\000\004\000\005\000\054\000\053\000\006\000\007\000\008\000\
\000\000\000\000\003\000\000\000\046\000\004\000\005\000\049\000\
\009\000\006\000\007\000\008\000\000\000\000\000\000\000\007\000\
\017\000\018\000\000\000\000\000\009\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\017\000\018\000\000\000\000\000\
\000\000\000\000\019\000\020\000\021\000\022\000\023\000\024\000\
\003\000\000\000\000\000\004\000\005\000\017\000\018\000\006\000\
\007\000\008\000\000\000\002\000\000\000\021\000\022\000\023\000\
\024\000\000\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\010\000\010\000\010\000\000\000\
\010\000\010\000\010\000\018\000\017\000\000\000\003\000\016\000\
\000\000\004\000\005\000\010\000\010\000\006\000\007\000\008\000\
\000\000\018\000\017\000\010\000\010\000\016\000\000\000\000\000\
\009\000\010\000\010\000\010\000\010\000\010\000\010\000\000\000\
\017\000\018\000\000\000\000\000\000\000\000\000\019\000\020\000\
\021\000\022\000\023\000\024\000\006\000\000\000\000\000\006\000\
\006\000\006\000\000\000\006\000\006\000\006\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\006\000\
\000\000\000\000\000\000\000\000\000\000\000\000\006\000\006\000\
\000\000\000\000\000\000\000\000\006\000\006\000\006\000\006\000\
\007\000\000\000\000\000\007\000\007\000\007\000\000\000\007\000\
\007\000\007\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\007\000\007\000\000\000\000\000\000\000\000\000\
\007\000\007\000\007\000\007\000\002\000\000\000\000\000\002\000\
\002\000\002\000\000\000\002\000\002\000\002\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\002\000\002\000\
\003\000\003\000\003\000\000\000\003\000\003\000\003\000\000\000\
\000\000\000\000\000\000\000\000\002\000\002\000\004\000\003\000\
\003\000\004\000\004\000\004\000\000\000\004\000\004\000\004\000\
\000\000\000\000\000\000\000\000\000\000\003\000\003\000\005\000\
\004\000\004\000\005\000\005\000\005\000\000\000\005\000\005\000\
\005\000\000\000\000\000\000\000\000\000\000\000\004\000\004\000\
\000\000\005\000\005\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\005\000"

let yycheck = "\001\000\
\000\000\035\001\036\001\037\001\038\001\000\000\000\000\009\000\
\022\001\000\000\004\001\025\001\001\000\000\000\021\001\017\000\
\018\000\019\000\020\000\021\000\022\000\023\000\024\000\001\001\
\004\001\019\001\004\001\005\001\027\001\028\001\008\001\009\001\
\010\001\004\001\033\001\043\001\035\001\036\001\037\001\038\001\
\043\001\019\001\020\001\025\001\025\001\047\000\048\000\037\001\
\038\001\027\001\028\001\000\000\054\000\026\001\022\001\033\001\
\034\001\035\001\036\001\037\001\038\001\027\000\001\001\029\000\
\030\000\004\001\005\001\006\001\020\001\008\001\009\001\010\001\
\255\255\255\255\001\001\255\255\042\000\004\001\005\001\045\000\
\019\001\008\001\009\001\010\001\255\255\255\255\255\255\000\000\
\027\001\028\001\255\255\255\255\019\001\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\027\001\028\001\255\255\255\255\
\255\255\255\255\033\001\034\001\035\001\036\001\037\001\038\001\
\001\001\255\255\255\255\004\001\005\001\027\001\028\001\008\001\
\009\001\010\001\255\255\000\000\255\255\035\001\036\001\037\001\
\038\001\255\255\019\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\255\255\004\001\005\001\006\001\255\255\
\008\001\009\001\010\001\006\001\006\001\255\255\001\001\006\001\
\255\255\004\001\005\001\019\001\020\001\008\001\009\001\010\001\
\255\255\020\001\020\001\027\001\028\001\020\001\255\255\255\255\
\019\001\033\001\034\001\035\001\036\001\037\001\038\001\255\255\
\027\001\028\001\255\255\255\255\255\255\255\255\033\001\034\001\
\035\001\036\001\037\001\038\001\001\001\255\255\255\255\004\001\
\005\001\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\255\255\255\255\255\255\255\255\027\001\028\001\
\255\255\255\255\255\255\255\255\033\001\034\001\035\001\036\001\
\001\001\255\255\255\255\004\001\005\001\006\001\255\255\008\001\
\009\001\010\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\019\001\020\001\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\255\255\255\255\255\255\255\255\
\033\001\034\001\035\001\036\001\001\001\255\255\255\255\004\001\
\005\001\006\001\255\255\008\001\009\001\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\001\001\019\001\020\001\
\004\001\005\001\006\001\255\255\008\001\009\001\010\001\255\255\
\255\255\255\255\255\255\255\255\033\001\034\001\001\001\019\001\
\020\001\004\001\005\001\006\001\255\255\008\001\009\001\010\001\
\255\255\255\255\255\255\255\255\255\255\033\001\034\001\001\001\
\019\001\020\001\004\001\005\001\006\001\255\255\008\001\009\001\
\010\001\255\255\255\255\255\255\255\255\255\255\033\001\034\001\
\255\255\019\001\020\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\034\001"

let yynames_const = "\
  EOF\000\
  LET\000\
  IN\000\
  REC\000\
  FUN\000\
  TRUE\000\
  FALSE\000\
  REF\000\
  IF\000\
  THEN\000\
  ELSE\000\
  HD\000\
  TL\000\
  FST\000\
  SND\000\
  LPAREN\000\
  RPAREN\000\
  LBRACK\000\
  RBRACK\000\
  SEMICOLON\000\
  COMMA\000\
  RIGHTARROW\000\
  EQ\000\
  LT\000\
  GT\000\
  NEQ\000\
  DEREF\000\
  ASSIGN\000\
  CONS\000\
  ANDAND\000\
  OROR\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIV\000\
  CARET\000\
  AT\000\
  NOT\000\
  APP\000\
  COLON\000\
  "

let yynames_block = "\
  INTEGER_LITERAL\000\
  FLOAT_LITERAL\000\
  STRING_LITERAL\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 41 "miniocamlparse.mly"
                                 ( _1 )
# 327 "miniocamlparse.ml"
               : Miniocamlast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 44 "miniocamlparse.mly"
                                 ( Operation(_1,LessThan,_3) )
# 335 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 45 "miniocamlparse.mly"
                                 ( Operation(_1,GreaterThan,_3) )
# 343 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 46 "miniocamlparse.mly"
                                 ( Operation(_1,And,_3) )
# 351 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 47 "miniocamlparse.mly"
                                 ( Operation(_1,Or,_3) )
# 359 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 48 "miniocamlparse.mly"
                                 ( Operation(_1,Plus,_3) )
# 367 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 49 "miniocamlparse.mly"
                                 ( Operation(_1,Minus,_3) )
# 375 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 50 "miniocamlparse.mly"
                                 ( Operation(_1,Mult,_3) )
# 383 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 51 "miniocamlparse.mly"
                                 ( Operation(_1,Div,_3) )
# 391 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 52 "miniocamlparse.mly"
                                 ( Var _1 )
# 398 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'exp_type) in
    Obj.repr(
# 53 "miniocamlparse.mly"
                                 ( PolyVar(_1,_3) )
# 406 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'exp_type) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : 'exp_type) in
    Obj.repr(
# 55 "miniocamlparse.mly"
                                 ( PolyVar(_1, FunType(_3, _5)) )
# 415 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 56 "miniocamlparse.mly"
                                 ( IntConst _1 )
# 422 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "miniocamlparse.mly"
                                 ( True )
# 428 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "miniocamlparse.mly"
                                 ( False )
# 434 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'exp_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'exp) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 60 "miniocamlparse.mly"
                                 ( Let(_2,_4,_6,_8) )
# 444 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'exp_type) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 62 "miniocamlparse.mly"
                                 ( Fun(_2,_4,_6) )
# 453 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp) in
    Obj.repr(
# 63 "miniocamlparse.mly"
                                 ( App(_1,_2) )
# 461 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'exp) in
    Obj.repr(
# 64 "miniocamlparse.mly"
                                 ( _2 )
# 468 "miniocamlparse.ml"
               : 'exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 67 "miniocamlparse.mly"
                                 ( if _1 = "bool" then BoolType else if _1 = "int" then IntType else Typevar(_1) )
# 475 "miniocamlparse.ml"
               : 'exp_type))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'exp_type) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'exp_type) in
    Obj.repr(
# 68 "miniocamlparse.mly"
                                               ( FunType(_2, _4) )
# 483 "miniocamlparse.ml"
               : 'exp_type))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Miniocamlast.exp)
